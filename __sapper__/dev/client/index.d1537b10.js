import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as onMount, g as globals, a as space, e as element, t as text, h as head_selector, b as detach_dev, c as claim_space, f as claim_element, j as children, k as claim_text, l as attr_dev, m as add_location, n as insert_hydration_dev, p as append_hydration_dev, q as noop, r as validate_each_argument, u as validate_each_keys, w as set_input_value, x as listen_dev, y as update_keyed_each, z as run_all, A as set_data_dev, B as destroy_block, C as destroy_each } from './client.aec5a53b.js';

/* src/routes/index.svelte generated by Svelte v3.59.2 */

const { console: console_1 } = globals;
const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	child_ctx[16] = list;
	child_ctx[17] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

// (165:1) {:else}
function create_else_block(ctx) {
	let div0;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t0;
	let div1;
	let h2;
	let t1;
	let t2;
	let textarea;
	let t3;
	let button;
	let t4;
	let mounted;
	let dispose;
	let each_value = Array(22);
	validate_each_argument(each_value);
	const get_key = ctx => /*i*/ ctx[17];
	validate_each_keys(ctx, each_value, get_each_context, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	const block = {
		c: function create() {
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			div1 = element("div");
			h2 = element("h2");
			t1 = text("Pitch Report");
			t2 = space();
			textarea = element("textarea");
			t3 = space();
			button = element("button");
			t4 = text("Submit Team");
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h2 = claim_element(div1_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, "Pitch Report");
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			textarea = claim_element(div1_nodes, "TEXTAREA", { placeholder: true, class: true });
			children(textarea).forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t4 = claim_text(button_nodes, "Submit Team");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "player-inputs svelte-1ue88tc");
			add_location(div0, file, 165, 2, 3120);
			add_location(h2, file, 186, 3, 3687);
			attr_dev(textarea, "placeholder", "Enter detailed pitch conditions...");
			attr_dev(textarea, "class", "svelte-1ue88tc");
			add_location(textarea, file, 187, 3, 3712);
			attr_dev(div1, "class", "pitch-report svelte-1ue88tc");
			add_location(div1, file, 185, 2, 3657);
			attr_dev(button, "class", "svelte-1ue88tc");
			add_location(button, file, 190, 2, 3820);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div0, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div0, null);
				}
			}

			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, div1, anchor);
			append_hydration_dev(div1, h2);
			append_hydration_dev(h2, t1);
			append_hydration_dev(div1, t2);
			append_hydration_dev(div1, textarea);
			set_input_value(textarea, /*pitchReport*/ ctx[0]);
			insert_hydration_dev(target, t3, anchor);
			insert_hydration_dev(target, button, anchor);
			append_hydration_dev(button, t4);

			if (!mounted) {
				dispose = [
					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[12]),
					listen_dev(button, "click", /*handleSubmit*/ ctx[8], false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*filteredPlayers, Array, selectPlayer, showDropdown, inputValues, handleInput*/ 248) {
				each_value = Array(22);
				validate_each_argument(each_value);
				validate_each_keys(ctx, each_value, get_each_context, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div0, destroy_block, create_each_block, null, get_each_context);
			}

			if (dirty & /*pitchReport*/ 1) {
				set_input_value(textarea, /*pitchReport*/ ctx[0]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(button);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(165:1) {:else}",
		ctx
	});

	return block;
}

// (163:21) 
function create_if_block_1(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text("Loading player data...");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "Loading player data...");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 163, 2, 3079);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, p, anchor);
			append_hydration_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(163:21) ",
		ctx
	});

	return block;
}

// (161:1) {#if error}
function create_if_block(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(/*error*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, /*error*/ ctx[1]);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "error svelte-1ue88tc");
			add_location(p, file, 161, 2, 3026);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, p, anchor);
			append_hydration_dev(p, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*error*/ 2) set_data_dev(t, /*error*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(161:1) {#if error}",
		ctx
	});

	return block;
}

// (175:5) {#if showDropdown[i] && filteredPlayers[i].length > 0}
function create_if_block_2(ctx) {
	let ul;
	let each_value_1 = /*filteredPlayers*/ ctx[3][/*i*/ ctx[17]];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "autocomplete-items svelte-1ue88tc");
			add_location(ul, file, 175, 6, 3442);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(ul, null);
				}
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*selectPlayer, Array, filteredPlayers*/ 136) {
				each_value_1 = /*filteredPlayers*/ ctx[3][/*i*/ ctx[17]];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(175:5) {#if showDropdown[i] && filteredPlayers[i].length > 0}",
		ctx
	});

	return block;
}

// (177:7) {#each filteredPlayers[i] as player}
function create_each_block_1(ctx) {
	let li;
	let t_value = /*player*/ ctx[18] + "";
	let t;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[11](/*i*/ ctx[17], /*player*/ ctx[18]);
	}

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "class", "svelte-1ue88tc");
			add_location(li, file, 177, 8, 3526);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, li, anchor);
			append_hydration_dev(li, t);

			if (!mounted) {
				dispose = listen_dev(li, "click", click_handler, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*filteredPlayers*/ 8 && t_value !== (t_value = /*player*/ ctx[18] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(177:7) {#each filteredPlayers[i] as player}",
		ctx
	});

	return block;
}

// (167:3) {#each Array(22) as _, i (i)}
function create_each_block(key_1, ctx) {
	let div;
	let input;
	let t0;
	let t1;
	let mounted;
	let dispose;

	function input_input_handler() {
		/*input_input_handler*/ ctx[9].call(input, /*i*/ ctx[17]);
	}

	function input_handler() {
		return /*input_handler*/ ctx[10](/*i*/ ctx[17]);
	}

	let if_block = /*showDropdown*/ ctx[5][/*i*/ ctx[17]] && /*filteredPlayers*/ ctx[3][/*i*/ ctx[17]].length > 0 && create_if_block_2(ctx);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			div = element("div");
			input = element("input");
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			input = claim_element(div_nodes, "INPUT", {
				type: true,
				placeholder: true,
				class: true
			});

			t0 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			t1 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "type", "text");
			attr_dev(input, "placeholder", `Player ${/*i*/ ctx[17] + 1}`);
			attr_dev(input, "class", "svelte-1ue88tc");
			add_location(input, file, 168, 5, 3217);
			attr_dev(div, "class", "autocomplete svelte-1ue88tc");
			add_location(div, file, 167, 4, 3185);
			this.first = div;
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, input);
			set_input_value(input, /*inputValues*/ ctx[4][/*i*/ ctx[17]]);
			append_hydration_dev(div, t0);
			if (if_block) if_block.m(div, null);
			append_hydration_dev(div, t1);

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", input_input_handler),
					listen_dev(input, "input", input_handler, false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*inputValues, Array*/ 16 && input.value !== /*inputValues*/ ctx[4][/*i*/ ctx[17]]) {
				set_input_value(input, /*inputValues*/ ctx[4][/*i*/ ctx[17]]);
			}

			if (/*showDropdown*/ ctx[5][/*i*/ ctx[17]] && /*filteredPlayers*/ ctx[3][/*i*/ ctx[17]].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(div, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(167:3) {#each Array(22) as _, i (i)}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div;
	let h1;
	let t1;
	let t2;

	function select_block_type(ctx, dirty) {
		if (/*error*/ ctx[1]) return create_if_block;
		if (/*isLoading*/ ctx[2]) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			t0 = space();
			div = element("div");
			h1 = element("h1");
			t1 = text("Fantasy Cricket Team Selection");
			t2 = space();
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = head_selector('svelte-eiugba', document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Fantasy Cricket Team Selection");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Fantasy Cricket App";
			attr_dev(h1, "class", "svelte-1ue88tc");
			add_location(h1, file, 158, 1, 2970);
			attr_dev(div, "class", "container svelte-1ue88tc");
			add_location(div, file, 157, 0, 2945);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, h1);
			append_hydration_dev(h1, t1);
			append_hydration_dev(div, t2);
			if_block.m(div, null);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Routes', slots, []);
	let players = [];
	let selectedPlayers = Array(22).fill('');
	let pitchReport = '';
	let error = '';
	let isLoading = true;
	let filteredPlayers = Array(22).fill([]);
	let inputValues = Array(22).fill('');
	let showDropdown = Array(22).fill(false);

	onMount(async () => {
		try {
			const response = await fetch('/players.csv');

			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`);
			}

			const data = await response.text();
			players = data.split('\n').map(player => player.trim()).filter(player => player);
			$$invalidate(2, isLoading = false);
		} catch(e) {
			console.error('Error fetching players:', e);
			$$invalidate(1, error = 'Failed to load player data. Please try refreshing the page.');
			$$invalidate(2, isLoading = false);
		}
	});

	function handleInput(index, value) {
		$$invalidate(4, inputValues[index] = value, inputValues);
		$$invalidate(3, filteredPlayers[index] = players.filter(player => player.toLowerCase().includes(value.toLowerCase())), filteredPlayers);
		$$invalidate(5, showDropdown[index] = true, showDropdown);
		selectedPlayers[index] = '';
	}

	function selectPlayer(index, player) {
		selectedPlayers[index] = player;
		$$invalidate(4, inputValues[index] = player, inputValues);
		$$invalidate(5, showDropdown[index] = false, showDropdown);
	}

	function handleSubmit() {
		$$invalidate(1, error = '');

		if (selectedPlayers.some(player => !player)) {
			$$invalidate(1, error = 'Please select all 22 players before submitting.');
			return;
		}

		if (!pitchReport.trim()) {
			$$invalidate(1, error = 'Please provide a pitch report before submitting.');
			return;
		}

		console.log('Selected players:', selectedPlayers);
		console.log('Pitch report:', pitchReport);
		console.log('Form submitted successfully!');
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	function input_input_handler(i) {
		inputValues[i] = this.value;
		$$invalidate(4, inputValues);
	}

	const input_handler = i => handleInput(i, inputValues[i]);
	const click_handler = (i, player) => selectPlayer(i, player);

	function textarea_input_handler() {
		pitchReport = this.value;
		$$invalidate(0, pitchReport);
	}

	$$self.$capture_state = () => ({
		onMount,
		players,
		selectedPlayers,
		pitchReport,
		error,
		isLoading,
		filteredPlayers,
		inputValues,
		showDropdown,
		handleInput,
		selectPlayer,
		handleSubmit
	});

	$$self.$inject_state = $$props => {
		if ('players' in $$props) players = $$props.players;
		if ('selectedPlayers' in $$props) selectedPlayers = $$props.selectedPlayers;
		if ('pitchReport' in $$props) $$invalidate(0, pitchReport = $$props.pitchReport);
		if ('error' in $$props) $$invalidate(1, error = $$props.error);
		if ('isLoading' in $$props) $$invalidate(2, isLoading = $$props.isLoading);
		if ('filteredPlayers' in $$props) $$invalidate(3, filteredPlayers = $$props.filteredPlayers);
		if ('inputValues' in $$props) $$invalidate(4, inputValues = $$props.inputValues);
		if ('showDropdown' in $$props) $$invalidate(5, showDropdown = $$props.showDropdown);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		pitchReport,
		error,
		isLoading,
		filteredPlayers,
		inputValues,
		showDropdown,
		handleInput,
		selectPlayer,
		handleSubmit,
		input_input_handler,
		input_handler,
		click_handler,
		textarea_input_handler
	];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export { Routes as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
